// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "sportsync/entities"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// GetRecentMessages provides a mock function with given fields: c, teamId, userId, senderId
func (_m *ChatRepository) GetRecentMessages(c context.Context, teamId string, userId string, senderId string) ([]entities.Chat, error) {
	ret := _m.Called(c, teamId, userId, senderId)

	var r0 []entities.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]entities.Chat, error)); ok {
		return rf(c, teamId, userId, senderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []entities.Chat); ok {
		r0 = rf(c, teamId, userId, senderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(c, teamId, userId, senderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: c, chat
func (_m *ChatRepository) Insert(c context.Context, chat entities.Chat) error {
	ret := _m.Called(c, chat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Chat) error); ok {
		r0 = rf(c, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
