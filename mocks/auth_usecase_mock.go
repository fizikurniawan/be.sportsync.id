// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "sportsync/models"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, userReq
func (_m *AuthUsecase) Login(ctx context.Context, userReq models.LoginBody) (models.LoginResponse, error) {
	ret := _m.Called(ctx, userReq)

	var r0 models.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginBody) (models.LoginResponse, error)); ok {
		return rf(ctx, userReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginBody) models.LoginResponse); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Get(0).(models.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.LoginBody) error); ok {
		r1 = rf(ctx, userReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUsecase) RefreshToken(ctx context.Context, refreshToken string) (models.LoginResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 models.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.LoginResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.LoginResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(models.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, userReq
func (_m *AuthUsecase) Register(ctx context.Context, userReq models.RegisterBody) error {
	ret := _m.Called(ctx, userReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterBody) error); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
